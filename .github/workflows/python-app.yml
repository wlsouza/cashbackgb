# This workflow will install Python dependencies and run tests.

name: CashBackGB
defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  CI:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
        
    - name: Install python venv
      run: python -m pip install virtualenv

    - name: Setup virtual env
      uses: actions/cache@v2
      id: cache-venv
      with:
        path: venv
        key: ${{runner.os}}-venv-${{hashFiles('**/*requirements.txt')}}
        restore-keys: ${{runner.os}}-venv-

    - name: Create and activate virtual env
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        make install-dev
      if: steps.cache-venv.outputs.cache-hit != 'true'

    - name: Run tests
      run: |
        env TEST_DB_URL="sqlite+aiosqlite:///test.db"
        source venv/bin/activate
        make test

  CD:
      runs-on: ubuntu-latest
      needs: [CI]
      if: github.ref == 'refs/heads/main'
      
      steps:
        - name: Install AWS CLI
          uses: unfor19/install-aws-cli-action@v1
          with:
            version: 1
          env:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        
        - name: Check out code
          uses: actions/checkout@v2
      
        - name: Create docker images
          run: docker build -t 382985906819.dkr.ecr.us-east-1.amazonaws.com/cashbackgb:lambda . -f Dockerfile.aws.lambda
          env:
            RDS_DB_URL: ${{ secrets.AWS_RDS_DB_URL }}

        - name: Upload docker into ECR
          run: docker push 382985906819.dkr.ecr.us-east-1.amazonaws.com/cashbackgb:lambda

        - name: Install serverless framework
          run: curl -o- -L https://slss.io/install | bash

        - name: Deploy to Lambda Function and API Gateway
          run: npx serverless deploy --stage dev